/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Hotel_System;

import java.awt.Color;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author USER
 */
public class Checkout extends javax.swing.JInternalFrame {

    /**
     * Creates new form Checkout
     */
    public Checkout() {
        initComponents();
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI ui = (BasicInternalFrameUI) this.getUI();
        ui.setNorthPane(null);
        getContentPane().setBackground(new Color(238, 238, 238));

        bookingData.getTableHeader().setFont(new java.awt.Font("Roboto", java.awt.Font.BOLD, 12));
        bookingData.getTableHeader().setOpaque(false);
        bookingData.getTableHeader().setBackground(new Color(109, 169, 228));
        bookingData.getTableHeader().setForeground(Color.WHITE);
        bookingData.setRowHeight(25);
        bookingData.setShowGrid(false);
        bookingData.setShowVerticalLines(false);
        DefaultTableCellRenderer centerdata = new DefaultTableCellRenderer();
        centerdata.setHorizontalAlignment(JLabel.CENTER);
        for (int i = 0; i <= 6; i++) {
            bookingData.getColumnModel().getColumn(i).setCellRenderer(centerdata);
        }

        refreshauto();
    }

    private void refreshauto() {
        DefaultTableModel model = (DefaultTableModel) bookingData.getModel();
        model.setRowCount(0); // Clear existing rows in the table

        try (BufferedReader reader = new BufferedReader(new FileReader("bookings.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length == 7) {
                    String roomNumber = parts[0];
                    String customerName = parts[1];
                    String icNumber = parts[2];
                    String contactNumber = parts[3];
                    String emailAddress = parts[4];
                    String checkInDate = parts[5];
                    String checkOutDate = parts[6];

                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                    Date parsedCheckInDate = dateFormat.parse(checkInDate);
                    Date parsedCheckOutDate = dateFormat.parse(checkOutDate);

                    String formattedCheckInDate = dateFormat.format(parsedCheckInDate);
                    String formattedCheckOutDate = dateFormat.format(parsedCheckOutDate);

                    model.addRow(new Object[]{roomNumber, customerName, icNumber, contactNumber, emailAddress, formattedCheckInDate, formattedCheckOutDate});
                }
            }
        } catch (IOException | ParseException ex) {
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        bookingTable = new javax.swing.JScrollPane();
        bookingData = new javax.swing.JTable();
        refreshButton = new javax.swing.JButton();
        checkoutButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(227, 244, 244));
        setName("Checkout"); // NOI18N

        jLabel1.setFont(new java.awt.Font("Rockwell Condensed", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 153, 204));
        jLabel1.setText("CHECKOUT");

        bookingData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            new String [] {
                "Room No", "Name", "I/C No", "Contact Number", "Email Address", "Check-In Date", "Check-Out Date"
            }));
            bookingData.setFocusable(false);
            bookingData.setRowHeight(25);
            bookingData.getTableHeader().setReorderingAllowed(false);
            bookingTable.setViewportView(bookingData);

            refreshButton.setBackground(new java.awt.Color(204, 204, 204));
            refreshButton.setFont(new java.awt.Font("Segoe UI", 3, 10)); // NOI18N
            refreshButton.setForeground(new java.awt.Color(255, 255, 255));
            refreshButton.setText("Refresh");
            refreshButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    refreshButtonActionPerformed(evt);
                }
            });

            checkoutButton.setBackground(new java.awt.Color(51, 153, 255));
            checkoutButton.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
            checkoutButton.setForeground(new java.awt.Color(255, 255, 255));
            checkoutButton.setText("Checkout");
            checkoutButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 153, 255)));
            checkoutButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    checkoutButtonActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap(319, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addGap(216, 216, 216)
                    .addComponent(refreshButton)
                    .addGap(61, 61, 61))
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(343, 343, 343)
                            .addComponent(checkoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(48, 48, 48)
                            .addComponent(bookingTable, javax.swing.GroupLayout.PREFERRED_SIZE, 723, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 12, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGap(0, 0, Short.MAX_VALUE)
                            .addComponent(refreshButton)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(bookingTable, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(checkoutButton)
                    .addGap(0, 65, Short.MAX_VALUE))
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) bookingData.getModel();
        model.setRowCount(0); // Clear existing rows in the table

        try (BufferedReader reader = new BufferedReader(new FileReader("bookings.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length == 7) {
                    String roomNumber = parts[0];
                    String customerName = parts[1];
                    String icNumber = parts[2];
                    String contactNumber = parts[3];
                    String emailAddress = parts[4];
                    String checkInDate = parts[5];
                    String checkOutDate = parts[6];

                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                    Date parsedCheckInDate = dateFormat.parse(checkInDate);
                    Date parsedCheckOutDate = dateFormat.parse(checkOutDate);

                    String formattedCheckInDate = dateFormat.format(parsedCheckInDate);
                    String formattedCheckOutDate = dateFormat.format(parsedCheckOutDate);

                    model.addRow(new Object[]{roomNumber, customerName, icNumber, contactNumber, emailAddress, formattedCheckInDate, formattedCheckOutDate});
                }
            }
        } catch (IOException | ParseException ex) {
            ex.printStackTrace();
        }    }//GEN-LAST:event_refreshButtonActionPerformed

    private void checkoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkoutButtonActionPerformed
        // Get the selected row index
        int selectedRowIndex = bookingData.getSelectedRow();

// Check if a row is selected
        if (selectedRowIndex == -1) {
            JOptionPane.showMessageDialog(this, "Please select a booking to checkout.");
            return;
        }

        try {
            // Get the selected data from the table
            String roomNumber = bookingData.getValueAt(selectedRowIndex, 0).toString();
            String customerName = bookingData.getValueAt(selectedRowIndex, 1).toString();
            String icNumber = bookingData.getValueAt(selectedRowIndex, 2).toString();
            String contactNumber = bookingData.getValueAt(selectedRowIndex, 3).toString();
            String emailAddress = bookingData.getValueAt(selectedRowIndex, 4).toString();
            String checkInDate = bookingData.getValueAt(selectedRowIndex, 5).toString();
            String checkOutDate = bookingData.getValueAt(selectedRowIndex, 6).toString();

            // Validate the date format
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            sdf.setLenient(false);
            Date checkIn;
            try {
                checkIn = sdf.parse(checkInDate);
            } catch (ParseException e) {
                throw new ParseException("Invalid check-in date format", 0);
            }

            Date checkOut;
            try {
                checkOut = sdf.parse(checkOutDate);
            } catch (ParseException e) {
                throw new ParseException("Invalid check-out date format", 0);
            }

            // Calculate the duration of stay
            long durationInMillis = checkOut.getTime() - checkIn.getTime();
            int durationInDays = (int) (durationInMillis / (1000 * 60 * 60 * 24));

            // Calculate charges and taxes
            double roomCharges = 350.00 * durationInDays;
            double serviceTax = roomCharges * 0.1;
            double tourismTax = 10.00 * durationInDays;
            double totalCharges = roomCharges + serviceTax + tourismTax;

            // Write the checkout information to checkout.txt
            try (BufferedWriter writer = new BufferedWriter(new FileWriter("checkout.txt", true))) {
                writer.write("Room Number: " + roomNumber);
                writer.newLine();
                writer.write("Customer Name: " + customerName);
                writer.newLine();
                writer.write("I/C Number: " + icNumber);
                writer.newLine();
                writer.write("Contact Number: " + contactNumber);
                writer.newLine();
                writer.write("Email Address: " + emailAddress);
                writer.newLine();
                writer.write("Check-In Date: " + checkInDate);
                writer.newLine();
                writer.write("Check-Out Date: " + checkOutDate);
                writer.newLine();
                writer.write("Duration of Stay: " + durationInDays + " days");
                writer.newLine();
                writer.write("Room Charges: RM" + roomCharges);
                writer.newLine();
                writer.write("Service Tax: RM" + serviceTax);
                writer.newLine();
                writer.write("Tourism Tax: RM" + tourismTax);
                writer.newLine();
                writer.write("Total Charges: RM" + totalCharges);
                writer.newLine();
                writer.newLine();
            } catch (IOException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Failed to write checkout information.");
                return;
            }

            // Display the checkout information
            String checkoutInfo = "Room Number: " + roomNumber
                    + "\nCustomer Name: " + customerName
                    + "\nI/C Number: " + icNumber
                    + "\nContact Number: " + contactNumber
                    + "\nEmail Address: " + emailAddress
                    + "\nCheck-In Date: " + checkInDate
                    + "\nCheck-Out Date: " + checkOutDate
                    + "\nDuration of Stay: " + durationInDays + " days"
                    + "\nRoom Charges: RM" + roomCharges
                    + "\nService Tax: RM" + serviceTax
                    + "\nTourism Tax: RM" + tourismTax
                    + "\nTotal Charges: RM" + totalCharges;

            int choice = JOptionPane.showConfirmDialog(this, "Checkout successfully!\n\n" + checkoutInfo + "\n\nDo you want to print the receipt?", "Print Receipt", JOptionPane.YES_NO_OPTION);

            if (choice == JOptionPane.YES_OPTION) {
                // Generate PDF receipt
                String fileName = "Room" + roomNumber + "_" + customerName + "_" + checkOutDate + ".pdf";
                generatePDFReceipt(fileName, checkoutInfo);
                JOptionPane.showMessageDialog(this, "Receipt generated successfully!\n\nReceipt saved as: " + fileName);
            }
            // Remove the selected row from the table
            DefaultTableModel model = (DefaultTableModel) bookingData.getModel();
            model.removeRow(selectedRowIndex);

            // Remove the selected row from bookings.txt
            try {
                // Read all lines from bookings.txt
                java.util.List<String> lines = Files.readAllLines(Paths.get("bookings.txt"));

                // Remove the selected row
                lines.remove(selectedRowIndex);

                // Write the modified lines back to bookings.txt
                Files.write(Paths.get("bookings.txt"), lines);
            } catch (IOException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Failed to remove booking information from bookings.txt.");
            }
        } catch (ParseException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
}    }//GEN-LAST:event_checkoutButtonActionPerformed

    // Method to generate a PDF receipt
// Method to generate a PDF receipt
    private void generatePDFReceipt(String fileName, String checkoutInfo) {
        Document document = new Document();

        try {
            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(fileName));
            document.open();

            // Set font styles
            Font headerFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
            Font titleFont = new Font(Font.FontFamily.TIMES_ROMAN, 14, Font.BOLD);
            Font normalFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);

            // Add headers and titles
            Paragraph header = new Paragraph("Receipt", headerFont);
            header.setAlignment(Element.ALIGN_CENTER);
            document.add(header);

            Paragraph title = new Paragraph("Checkout Information", titleFont);
            title.setAlignment(Element.ALIGN_CENTER);
            document.add(title);

            // Add an image
            Image logo = Image.getInstance("src/main/resources/Images/logo.png");
            logo.setAlignment(Element.ALIGN_CENTER);
            logo.scaleToFit(200, 200); // Adjust the image size as needed
            document.add(logo);

            // Extract specific information from checkoutInfo
            String roomNumber = extractValue(checkoutInfo, "Room Number: ");
            String customerName = extractValue(checkoutInfo, "Customer Name: ");
            String icNumber = extractValue(checkoutInfo, "I/C Number: ");
            String contactNumber = extractValue(checkoutInfo, "Contact Number: ");
            String emailAddress = extractValue(checkoutInfo, "Email Address: ");
            String checkInDate = extractValue(checkoutInfo, "Check-In Date: ");
            String checkOutDate = extractValue(checkoutInfo, "Check-Out Date: ");
            String durationOfStay = extractValue(checkoutInfo, "Duration of Stay: ");
            String roomCharges = extractValue(checkoutInfo, "Room Charges: ");
            String serviceTax = extractValue(checkoutInfo, "Service Tax: ");
            String tourismTax = extractValue(checkoutInfo, "Tourism Tax: ");
            String totalCharges = extractValue(checkoutInfo, "Total Charges: ");

            // Add content using paragraphs
            Paragraph content = new Paragraph();
            content.setAlignment(Element.ALIGN_LEFT);
            content.setSpacingBefore(10f);
            content.setSpacingAfter(10f);
            content.add("\tRoom Number: \t" + roomNumber + "\n\n");
            content.add("\tCustomer Name: \t" + customerName + "\n\n");
            content.add("\tI/C Number: \t" + icNumber + "\n\n");
            content.add("\tContact Number: \t" + contactNumber + "\n\n");
            content.add("\tEmail Address: \t" + emailAddress + "\n\n");
            content.add("\tCheck-In Date: \t" + checkInDate + "\n\n");
            content.add("\tCheck-Out Date: \t" + checkOutDate + "\n\n");
            content.add("\tDuration of Stay: \t" + durationOfStay + "\n\n");
            content.add("--------------------------------------------------------------------------------------------------------------------------");
            document.add(content);

            // Add a table
            PdfPTable table = new PdfPTable(2);
            table.setWidthPercentage(80);
            table.setSpacingBefore(20f);
            table.setSpacingAfter(20f);

            // Set table headers
            PdfPCell header1 = new PdfPCell(new Phrase("Criteria"));
            PdfPCell header2 = new PdfPCell(new Phrase("Price"));

            // Apply styling to table headers
            header1.setBackgroundColor(BaseColor.LIGHT_GRAY);
            header1.setHorizontalAlignment(Element.ALIGN_CENTER);
            header2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            header2.setHorizontalAlignment(Element.ALIGN_CENTER);

            // Add table headers to the table
            table.addCell(header1);
            table.addCell(header2);

            // Add table content
            table.addCell("Room Charges (RM350/night)");
            table.addCell(roomCharges);
            table.addCell("Service Tax (10%)");
            table.addCell(serviceTax);
            table.addCell("Tourism Tax (RM10/night)");
            table.addCell(tourismTax);
            table.addCell("Total Charges");
            table.addCell(totalCharges);

            document.add(table);
            Paragraph thankyou = new Paragraph("*****Thank You !!! Welcome Again !!!*****", titleFont);
            thankyou.setAlignment(Element.ALIGN_CENTER);
            document.add(thankyou);
            document.close();
            writer.close();

//            JOptionPane.showMessageDialog(this, "PDF receipt generated successfully.");
        } catch (DocumentException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to generate PDF receipt.");
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "File not found: " + fileName);
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error while accessing the file: " + fileName);
        }
    }

    private String extractValue(String text, String label) {
        int startIndex = text.indexOf(label);
        if (startIndex != -1) {
            startIndex += label.length();
            int endIndex = text.indexOf("\n", startIndex);
            if (endIndex == -1) {
                endIndex = text.length();
            }
            return text.substring(startIndex, endIndex).trim();
        }
        return "";
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable bookingData;
    private javax.swing.JScrollPane bookingTable;
    private javax.swing.JButton checkoutButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton refreshButton;
    // End of variables declaration//GEN-END:variables
}
