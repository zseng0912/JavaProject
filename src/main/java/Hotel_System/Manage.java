/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Hotel_System;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.border.Border;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author USER
 */
public class Manage extends javax.swing.JInternalFrame {

    private List<String> removedRoomNumbers = new ArrayList<>();

    /**
     * Creates new form Manage
     */
    public Manage() {
        initComponents();
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI ui = (BasicInternalFrameUI) this.getUI();
        ui.setNorthPane(null);
        getContentPane().setBackground(new Color(238, 238, 238));

        jTable1.getTableHeader().setFont(new Font("Roboto", Font.BOLD, 12));
        jTable1.getTableHeader().setOpaque(false);
        jTable1.getTableHeader().setBackground(new Color(109, 169, 228));
        jTable1.getTableHeader().setForeground(Color.WHITE);
        jTable1.setRowHeight(25);
        DefaultTableCellRenderer centerdata = new DefaultTableCellRenderer();
        centerdata.setHorizontalAlignment(JLabel.CENTER);
        for (int i = 0; i <= 6; i++) {
            jTable1.getColumnModel().getColumn(i).setCellRenderer(centerdata);
        }
// Create a custom TableCellRenderer for table header
        class CustomHeaderRenderer extends DefaultTableCellRenderer {

            private final Border border;

            public CustomHeaderRenderer() {
                // Create a custom border with desired height and inside border lines
                int top = 0;  // Adjust the top border thickness as needed
                int left = 0;  // Adjust the left border thickness as needed
                int bottom = 0;  // Adjust the bottom border thickness as needed
                int right = 0;  // Adjust the right border thickness as needed
                Color borderColor = new Color(200, 200, 200);  // Light grey color
                border = BorderFactory.createMatteBorder(top, left, bottom, right, borderColor);
            }

            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                JTableHeader header = table.getTableHeader();
                setForeground(header.getForeground());
                setBackground(header.getBackground());
                setFont(header.getFont());
                setOpaque(true);
                setBorder(border);
                setText(value != null ? value.toString() : "");
                setHorizontalAlignment(SwingConstants.CENTER);
                return this;
            }
        }

// Set the custom TableCellRenderer to table header
        jTable1.getTableHeader().setDefaultRenderer(new CustomHeaderRenderer());

// Increase the height of the table header
        jTable1.getTableHeader().setPreferredSize(new Dimension(jTable1.getTableHeader().getPreferredSize().width, 30));

        displayInfo();
        jTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent event) {
                if (!event.getValueIsAdjusting()) {
                    int selectedRow = jTable1.getSelectedRow();
                    if (selectedRow != -1) {
                        displaySelectedRowData(selectedRow);
                    }
                }
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        refreshButton = new javax.swing.JButton();
        searchTextField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        RoomNumber = new javax.swing.JLabel();
        Name = new javax.swing.JLabel();
        Contact = new javax.swing.JLabel();
        Email = new javax.swing.JLabel();
        Check_In = new javax.swing.JLabel();
        Check_Out = new javax.swing.JLabel();
        roomNoComboBox = new javax.swing.JComboBox<>();
        nameTextField = new javax.swing.JTextField();
        contactTextField = new javax.swing.JTextField();
        emailTextField = new javax.swing.JTextField();
        checkInDateChooser = new com.toedter.calendar.JDateChooser();
        checkOutDateChooser = new com.toedter.calendar.JDateChooser();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        icField = new javax.swing.JTextField();
        IC = new javax.swing.JLabel();

        setBackground(new java.awt.Color(227, 244, 244));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Room No", "Name", "I/C No", "Contact Number", "Email Address", "Check-In Date", "Check-Out Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setFocusable(false);
        jTable1.setRowHeight(25);
        jTable1.setShowGrid(false);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        refreshButton.setBackground(new java.awt.Color(0, 204, 255));
        refreshButton.setForeground(new java.awt.Color(255, 255, 255));
        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        searchTextField.setText("Search");
        searchTextField.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        searchButton.setBackground(new java.awt.Color(102, 153, 255));
        searchButton.setForeground(new java.awt.Color(255, 255, 255));
        searchButton.setText("SEARCH");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        RoomNumber.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        RoomNumber.setForeground(new java.awt.Color(0, 153, 204));
        RoomNumber.setText("Room Number:");

        Name.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        Name.setForeground(new java.awt.Color(0, 153, 204));
        Name.setText("Name:");

        Contact.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        Contact.setForeground(new java.awt.Color(0, 153, 204));
        Contact.setText("Contact Number:");

        Email.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        Email.setForeground(new java.awt.Color(0, 153, 204));
        Email.setText("Email Address:");

        Check_In.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        Check_In.setForeground(new java.awt.Color(0, 153, 204));
        Check_In.setText("Check-In Date:");

        Check_Out.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        Check_Out.setForeground(new java.awt.Color(0, 153, 204));
        Check_Out.setText("Check-Out Date:");

        roomNoComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "001", "002", "003", "004", "005", "006", "007", "008", "009", "010", "011", "012", "013", "014", "015", "016", "017", "018", "019", "020" }));
        roomNoComboBox.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        nameTextField.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        contactTextField.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        emailTextField.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        checkInDateChooser.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        checkOutDateChooser.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        updateButton.setBackground(new java.awt.Color(0, 153, 255));
        updateButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        updateButton.setForeground(new java.awt.Color(255, 255, 255));
        updateButton.setText("UPDATE");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        deleteButton.setBackground(new java.awt.Color(0, 153, 255));
        deleteButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        deleteButton.setForeground(new java.awt.Color(255, 255, 255));
        deleteButton.setText("DELETE");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        icField.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        IC.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        IC.setForeground(new java.awt.Color(0, 153, 204));
        IC.setText("I/C Number:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(262, 262, 262)
                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addComponent(searchButton)
                        .addGap(265, 265, 265))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(RoomNumber)
                                .addGap(18, 18, 18)
                                .addComponent(roomNoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(70, 70, 70)
                                .addComponent(Name)
                                .addGap(18, 18, 18)
                                .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(IC)
                                .addGap(18, 18, 18)
                                .addComponent(icField, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(Email)
                                    .addComponent(Check_In)
                                    .addComponent(Check_Out, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(checkInDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(checkOutDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(Contact)
                                .addGap(18, 18, 18)
                                .addComponent(contactTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(refreshButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE))))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(roomNoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RoomNumber))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Name))
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(icField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(IC))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Contact)
                            .addComponent(contactTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Email))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(checkInDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Check_In))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Check_Out)
                            .addComponent(checkOutDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(66, 66, 66)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(updateButton)
                            .addComponent(deleteButton)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(refreshButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        displayInfo();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Clear existing table data

        String searchTerm = searchTextField.getText().trim().toLowerCase();

        try (BufferedReader reader = new BufferedReader(new FileReader("bookings.txt"))) {
            String line;
            String[] rowData;

            while ((line = reader.readLine()) != null) {
                rowData = line.split(",");

                if (rowData.length == 7 && rowData[1].toLowerCase().contains(searchTerm)) {
                    model.addRow(rowData);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow != -1) {
            String roomNumber = roomNoComboBox.getSelectedItem().toString();
            String name = nameTextField.getText().trim();
            String ic = icField.getText().trim();
            String contact = contactTextField.getText().trim();
            String email = emailTextField.getText().trim();
            Date checkInDate = checkInDateChooser.getDate();
            Date checkOutDate = checkOutDateChooser.getDate();

            //check empty
            if (roomNumber.isEmpty() || name.isEmpty() || ic.isEmpty()|| contact.isEmpty()|| email.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please enter all fields.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // Check for conflict
            if (checkConflict(selectedRow, roomNumber, checkInDate, checkOutDate)) {
                // Construct conflict message
                String conflictMessage = getConflictMessage(selectedRow, roomNumber, checkInDate, checkOutDate);

                JOptionPane.showMessageDialog(this, "Booking date conflicts detected:\n" + conflictMessage, "Conflict", JOptionPane.ERROR_MESSAGE);
                return;
            }

            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setValueAt(roomNumber, selectedRow, 0);
            model.setValueAt(name, selectedRow, 1);
            model.setValueAt(ic, selectedRow, 2);
            model.setValueAt(contact, selectedRow, 3);
            model.setValueAt(email, selectedRow, 4);
            model.setValueAt(formatDate(checkInDate), selectedRow, 5);
            model.setValueAt(formatDate(checkOutDate), selectedRow, 6);

            updateFile(); // Update the bookings.txt file

            JOptionPane.showMessageDialog(this, "Update successful.", "Success", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow != -1) {
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            String roomNumber = model.getValueAt(selectedRow, 0).toString();
            Date checkInDate = parseDate(model.getValueAt(selectedRow, 5).toString());
            Date checkOutDate = parseDate(model.getValueAt(selectedRow, 6).toString());

//            if (checkConflict(selectedRow, roomNumber, checkInDate, checkOutDate)) {
//                JOptionPane.showMessageDialog(this, "Cannot delete. Conflict detected with existing data.", "Error", JOptionPane.ERROR_MESSAGE);
//                return;
//            }
            model.removeRow(selectedRow);
            updateFile(); // Update the bookings.txt file
            // Clear text fields
            roomNoComboBox.setSelectedIndex(-1);
            nameTextField.setText("");
            icField.setText("");
            contactTextField.setText("");
            emailTextField.setText("");
            checkInDateChooser.setDate(null);
            checkOutDateChooser.setDate(null);

            JOptionPane.showMessageDialog(this, "Deletion successful.", "Success", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private boolean checkConflict(int selectedRow, String roomNumber, Date checkInDate, Date checkOutDate) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        for (int i = 0; i < model.getRowCount(); i++) {
            if (i == selectedRow) {
                continue; // Skip the currently selected row
            }

            String existingRoomNumber = model.getValueAt(i, 0).toString();
            Date existingCheckInDate = parseDate(model.getValueAt(i, 5).toString());
            Date existingCheckOutDate = parseDate(model.getValueAt(i, 6).toString());

            // Check for date conflict and room number match
            if (existingRoomNumber.equals(roomNumber)
                    && ((checkInDate.equals(existingCheckInDate) || checkOutDate.equals(existingCheckOutDate))
                    || (checkInDate.after(existingCheckInDate) && checkInDate.before(existingCheckOutDate))
                    || (checkOutDate.after(existingCheckInDate) && checkOutDate.before(existingCheckOutDate))
                    || (checkInDate.before(existingCheckInDate) && checkOutDate.after(existingCheckOutDate)))) {
                return true; // Conflict detected
            }
        }

        return false; // No conflict
    }

    private String getConflictMessage(int selectedRow, String roomNumber, Date checkInDate, Date checkOutDate) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        StringBuilder conflictMessage = new StringBuilder();

        for (int i = 0; i < model.getRowCount(); i++) {
            if (i == selectedRow) {
                continue; // Skip the currently selected row
            }

            String existingRoomNumber = model.getValueAt(i, 0).toString();
            Date existingCheckInDate = parseDate(model.getValueAt(i, 5).toString());
            Date existingCheckOutDate = parseDate(model.getValueAt(i, 6).toString());

            // Check for date conflict and room number match
            if (existingRoomNumber.equals(roomNumber)
                    && ((checkInDate.equals(existingCheckInDate) || checkOutDate.equals(existingCheckOutDate))
                    || (checkInDate.after(existingCheckInDate) && checkInDate.before(existingCheckOutDate))
                    || (checkOutDate.after(existingCheckInDate) && checkOutDate.before(existingCheckOutDate))
                    || (checkInDate.before(existingCheckInDate) && checkOutDate.after(existingCheckOutDate)))) {
                // Construct the conflict message
                conflictMessage.append("Conflict with booking ID: ").append(model.getValueAt(i, 0))
                        .append(", Check-in: ").append(formatDate(existingCheckInDate))
                        .append(", Check-out: ").append(formatDate(existingCheckOutDate))
                        .append("\n");
            }
        }

        return conflictMessage.toString();
    }

    private void updateFile() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("bookings.txt"))) {
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

            for (int row = 0; row < model.getRowCount(); row++) {
                String roomNumber = model.getValueAt(row, 0).toString();
                String name = model.getValueAt(row, 1).toString();
                String ic = model.getValueAt(row, 2).toString();
                String contact = model.getValueAt(row, 3).toString();
                String email = model.getValueAt(row, 4).toString();
                String checkInDate = model.getValueAt(row, 5).toString();
                String checkOutDate = model.getValueAt(row, 6).toString();

                String line = roomNumber + "," + name + "," + ic + "," + contact + "," + email + "," + checkInDate + "," + checkOutDate;
                writer.write(line);
                writer.newLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void displayInfo() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Clear existing table data

        try (BufferedReader reader = new BufferedReader(new FileReader("bookings.txt"))) {
            String line;
            String[] rowData;

            while ((line = reader.readLine()) != null) {
                rowData = line.split(",");

                if (rowData.length == 7) {
                    model.addRow(rowData);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void displaySelectedRowData(int selectedRow) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        String roomNumber = model.getValueAt(selectedRow, 0).toString();
        String name = model.getValueAt(selectedRow, 1).toString();
        String ic = model.getValueAt(selectedRow, 2).toString();
        String contact = model.getValueAt(selectedRow, 3).toString();
        String email = model.getValueAt(selectedRow, 4).toString();
        String checkInDate = model.getValueAt(selectedRow, 5).toString();
        String checkOutDate = model.getValueAt(selectedRow, 6).toString();

        roomNoComboBox.setSelectedItem(roomNumber);
        nameTextField.setText(name);
        icField.setText(ic);
        contactTextField.setText(contact);
        emailTextField.setText(email);
        checkInDateChooser.setDate(parseDate(checkInDate));
        checkOutDateChooser.setDate(parseDate(checkOutDate));
    }

    private Date parseDate(String dateString) {
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        try {
            return dateFormat.parse(dateString);
        } catch (ParseException | NullPointerException e) {
            e.printStackTrace();
            return null;
        }
    }

    private String formatDate(Date date) {
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        return dateFormat.format(date);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Check_In;
    private javax.swing.JLabel Check_Out;
    private javax.swing.JLabel Contact;
    private javax.swing.JLabel Email;
    private javax.swing.JLabel IC;
    private javax.swing.JLabel Name;
    private javax.swing.JLabel RoomNumber;
    private com.toedter.calendar.JDateChooser checkInDateChooser;
    private com.toedter.calendar.JDateChooser checkOutDateChooser;
    private javax.swing.JTextField contactTextField;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField emailTextField;
    private javax.swing.JTextField icField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JButton refreshButton;
    private javax.swing.JComboBox<String> roomNoComboBox;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
