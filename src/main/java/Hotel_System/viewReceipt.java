/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Hotel_System;

import java.awt.Color;
import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author USER
 */
public class viewReceipt extends javax.swing.JInternalFrame {

    private String selectedFilePath; // Store the selected file path

    /**
     * Creates new form viewReceipt
     */
    public viewReceipt() {
        initComponents();
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI ui = (BasicInternalFrameUI) this.getUI();
        ui.setNorthPane(null);
        getContentPane().setBackground(new Color(238, 238, 238));

        receiptData.getTableHeader().setFont(new java.awt.Font("Roboto", java.awt.Font.BOLD, 12));
        receiptData.getTableHeader().setOpaque(false);
        receiptData.getTableHeader().setBackground(new Color(109, 169, 228));
        receiptData.getTableHeader().setForeground(Color.WHITE);
        receiptData.setRowHeight(25);
        receiptData.setShowGrid(false);
        receiptData.setShowVerticalLines(false);
        DefaultTableCellRenderer centerdata = new DefaultTableCellRenderer();
        centerdata.setHorizontalAlignment(JLabel.CENTER);
        for (int i = 0; i <= 8; i++) {
            receiptData.getColumnModel().getColumn(i).setCellRenderer(centerdata);
        }
        displayReceipts();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchTextField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        receiptTable = new javax.swing.JScrollPane();
        receiptData = new javax.swing.JTable();
        viewReceiptButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(227, 244, 244));

        searchTextField.setText("Search Customer Name");
        searchTextField.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        searchButton.setBackground(new java.awt.Color(0, 153, 255));
        searchButton.setForeground(new java.awt.Color(255, 255, 255));
        searchButton.setText("SEARCH");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        receiptData.setModel(new javax.swing.table.DefaultTableModel(
            new Object[][]{},
            new String[]{
                "Room No", "Name", "I/C No", "Contact Number", "Email Address", "Check-In Date", "Check-Out Date", "Stay Duration", "Total Charges"
            }){
                Class[] types = new Class[]{
                    java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
                };
                boolean[] canEdit = new boolean[]{
                    false, false, false, false, false, false, false, false, false
                };

                public Class getColumnClass(int columnIndex) {
                    return types[columnIndex];
                }

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit[columnIndex];
                }
            });
            receiptData.setFocusable(false);
            receiptData.setRowHeight(25);
            receiptData.setSelectionBackground(new java.awt.Color(204, 204, 204));
            receiptData.getTableHeader().setReorderingAllowed(false);
            receiptTable.setViewportView(receiptData);

            viewReceiptButton.setBackground(new java.awt.Color(0, 153, 204));
            viewReceiptButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
            viewReceiptButton.setForeground(new java.awt.Color(255, 255, 255));
            viewReceiptButton.setText("View Receipt");
            viewReceiptButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    viewReceiptButtonActionPerformed(evt);
                }
            });

            refreshButton.setBackground(new java.awt.Color(153, 153, 153));
            refreshButton.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
            refreshButton.setForeground(new java.awt.Color(255, 255, 255));
            refreshButton.setText("Refresh");
            refreshButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    refreshButtonActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(278, 278, 278)
                                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(searchButton))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(26, 26, 26)
                                    .addComponent(receiptTable, javax.swing.GroupLayout.PREFERRED_SIZE, 767, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(335, 335, 335)
                            .addComponent(viewReceiptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap(29, Short.MAX_VALUE))
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap(32, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(searchButton))
                    .addGap(8, 8, 8)
                    .addComponent(refreshButton)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(receiptTable, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(viewReceiptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(92, 92, 92))
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void viewReceiptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewReceiptButtonActionPerformed
        int selectedRow = receiptData.getSelectedRow();
        if (selectedRow != -1) {
            String roomNumber = (String) receiptData.getValueAt(selectedRow, 0);
            String customerName = (String) receiptData.getValueAt(selectedRow, 1);
            String checkOutDate = (String) receiptData.getValueAt(selectedRow, 6);
            String fileName = "Room" + roomNumber + "_" + customerName + "_" + checkOutDate + ".pdf";
            openPDF(fileName);
        }


    }//GEN-LAST:event_viewReceiptButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        String searchName = searchTextField.getText().trim();

        if (!searchName.isEmpty()) {
            DefaultTableModel model = (DefaultTableModel) receiptData.getModel();
            model.setRowCount(0); // Clear existing table data

            DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
            centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
            receiptData.setDefaultRenderer(Object.class, centerRenderer); // Set the cell renderer

            try (BufferedReader reader = new BufferedReader(new FileReader("checkout.txt"))) {
                String line;
                String[] labels = {
                    "Room Number: ",
                    "Customer Name: ",
                    "I/C Number: ",
                    "Contact Number: ",
                    "Email Address: ",
                    "Check-In Date: ",
                    "Check-Out Date: ",
                    "Duration of Stay: ",
                    "Total Charges: "
                };

                String[] rowData = new String[labels.length];
                boolean found = false;

                while ((line = reader.readLine()) != null) {
                    for (int i = 0; i < labels.length; i++) {
                        if (line.startsWith(labels[i])) {
                            rowData[i] = line.substring(labels[i].length()).trim();
                            break;
                        }
                    }

                    if (line.startsWith("Total Charges:")) {
                        String customerName = rowData[1];
                        if (customerName.toLowerCase().contains(searchName.toLowerCase())) {
                            model.addRow(rowData);
                            found = true;
                        }
                        rowData = new String[labels.length];
                    }
                }

                if (!found) {
                    JOptionPane.showMessageDialog(this, "No records found for the specified name.");
                }
            } catch (IOException e) {
                e.printStackTrace();
            }

            TableColumnModel columnModel = receiptData.getColumnModel();
            int columnCount = columnModel.getColumnCount();
            int[] columnWidths = {60, 120, 120, 120, 200, 100, 100, 100, 120}; // Adjust the widths as needed

            for (int i = 0; i < columnCount; i++) {
                TableColumn column = columnModel.getColumn(i);
                column.setPreferredWidth(columnWidths[i]);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please enter a name to search.");
        }    }//GEN-LAST:event_searchButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        searchTextField.setText("");
        displayReceipts();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void displayReceipts() {
        DefaultTableModel model = (DefaultTableModel) receiptData.getModel();
        model.setRowCount(0); // Clear existing table data

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        receiptData.setDefaultRenderer(Object.class, centerRenderer); // Set the cell renderer

        try (BufferedReader reader = new BufferedReader(new FileReader("checkout.txt"))) {
            String line;
            String[] labels = {
                "Room Number: ",
                "Customer Name: ",
                "I/C Number: ",
                "Contact Number: ",
                "Email Address: ",
                "Check-In Date: ",
                "Check-Out Date: ",
                "Duration of Stay: ",
                "Total Charges: "
            };

            Object[] rowData = new Object[labels.length];

            while ((line = reader.readLine()) != null) {
                for (int i = 0; i < labels.length; i++) {
                    if (line.startsWith(labels[i])) {
                        rowData[i] = line.substring(labels[i].length()).trim();
                        break;
                    }
                }

                if (line.startsWith("Total Charges:")) {
                    model.addRow(rowData);
                    rowData = new Object[labels.length];
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        TableColumnModel columnModel = receiptData.getColumnModel();
        int columnCount = columnModel.getColumnCount();
        int[] columnWidths = {100, 150, 150, 150, 200, 120, 120, 120, 120}; // Adjust the widths as needed

        for (int i = 0; i < columnCount; i++) {
            TableColumn column = columnModel.getColumn(i);
            column.setPreferredWidth(columnWidths[i]);
        }
    }

    private void openPDF(String fileName) {
        try {
            File file = new File(fileName);
            if (file.exists()) {
                if (Desktop.isDesktopSupported()) {
                    Desktop.getDesktop().open(file);
                } else {
                    JOptionPane.showMessageDialog(this, "Desktop is not supported.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "PDF file does not exist: " + fileName);
            }
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error while opening PDF file: " + fileName);
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable receiptData;
    private javax.swing.JScrollPane receiptTable;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JButton viewReceiptButton;
    // End of variables declaration//GEN-END:variables
}
